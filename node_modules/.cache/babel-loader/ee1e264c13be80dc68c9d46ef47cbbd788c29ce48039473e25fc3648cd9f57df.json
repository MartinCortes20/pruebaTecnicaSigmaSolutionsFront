{"ast":null,"code":"const API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n/**\n * Configuración base para fetch con manejo de errores\n * @param {string} url - URL de la API\n * @param {object} options - Opciones de fetch\n * @returns {Promise} - Respuesta de API\n */\nconst fetchWithErrorHandling = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(`Error al conectar con la API: ${error.message}`);\n  }\n};\n\n/**\n * Obtiene la lista completa de usuarios\n * @returns {Promise<Array>} - Array de usuarios\n */\nexport const fetchUsers = async () => {\n  const users = await fetchWithErrorHandling(`${API_BASE_URL}/users`);\n\n  // Transformamos los datos para tener una estructura consistente\n  return users.map(user => {\n    var _user$address, _user$company;\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      city: ((_user$address = user.address) === null || _user$address === void 0 ? void 0 : _user$address.city) || 'Ciudad no disponible',\n      phone: user.phone,\n      website: user.website,\n      company: ((_user$company = user.company) === null || _user$company === void 0 ? void 0 : _user$company.name) || 'Empresa no disponible',\n      username: user.username\n    };\n  });\n};\n\n/**\n * Obtiene un usuario específico por ID\n * @param {number} userId - ID del usuario\n * @returns {Promise<Object>} - Datos del usuario\n */\nexport const fetchUserById = async userId => {\n  var _user$address2, _user$company2;\n  const user = await fetchWithErrorHandling(`${API_BASE_URL}/users/${userId}`);\n  return {\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    city: ((_user$address2 = user.address) === null || _user$address2 === void 0 ? void 0 : _user$address2.city) || 'Ciudad no disponible',\n    phone: user.phone,\n    website: user.website,\n    company: ((_user$company2 = user.company) === null || _user$company2 === void 0 ? void 0 : _user$company2.name) || 'Empresa no disponible',\n    username: user.username\n  };\n};","map":{"version":3,"names":["API_BASE_URL","fetchWithErrorHandling","url","options","response","fetch","headers","ok","Error","status","json","error","console","message","fetchUsers","users","map","user","_user$address","_user$company","id","name","email","city","address","phone","website","company","username","fetchUserById","userId","_user$address2","_user$company2"],"sources":["/Users/martinfranciscocortesbuendia/Desktop/pruebaTecnicaSigma/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n/**\n * Configuración base para fetch con manejo de errores\n * @param {string} url - URL de la API\n * @param {object} options - Opciones de fetch\n * @returns {Promise} - Respuesta de API\n */\nconst fetchWithErrorHandling = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(`Error al conectar con la API: ${error.message}`);\n  }\n};\n\n/**\n * Obtiene la lista completa de usuarios\n * @returns {Promise<Array>} - Array de usuarios\n */\nexport const fetchUsers = async () => {\n  const users = await fetchWithErrorHandling(`${API_BASE_URL}/users`);\n  \n  // Transformamos los datos para tener una estructura consistente\n  return users.map(user => ({\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    city: user.address?.city || 'Ciudad no disponible',\n    phone: user.phone,\n    website: user.website,\n    company: user.company?.name || 'Empresa no disponible',\n    username: user.username,\n  }));\n};\n\n/**\n * Obtiene un usuario específico por ID\n * @param {number} userId - ID del usuario\n * @returns {Promise<Object>} - Datos del usuario\n */\nexport const fetchUserById = async (userId) => {\n  const user = await fetchWithErrorHandling(`${API_BASE_URL}/users/${userId}`);\n  \n  return {\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    city: user.address?.city || 'Ciudad no disponible',\n    phone: user.phone,\n    website: user.website,\n    company: user.company?.name || 'Empresa no disponible',\n    username: user.username,\n  };\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,sCAAsC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAChCI,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAM,IAAIH,KAAK,CAAC,iCAAiCG,KAAK,CAACE,OAAO,EAAE,CAAC;EACnE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,KAAK,GAAG,MAAMd,sBAAsB,CAAC,GAAGD,YAAY,QAAQ,CAAC;;EAEnE;EACA,OAAOe,KAAK,CAACC,GAAG,CAACC,IAAI;IAAA,IAAAC,aAAA,EAAAC,aAAA;IAAA,OAAK;MACxBC,EAAE,EAAEH,IAAI,CAACG,EAAE;MACXC,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfC,KAAK,EAAEL,IAAI,CAACK,KAAK;MACjBC,IAAI,EAAE,EAAAL,aAAA,GAAAD,IAAI,CAACO,OAAO,cAAAN,aAAA,uBAAZA,aAAA,CAAcK,IAAI,KAAI,sBAAsB;MAClDE,KAAK,EAAER,IAAI,CAACQ,KAAK;MACjBC,OAAO,EAAET,IAAI,CAACS,OAAO;MACrBC,OAAO,EAAE,EAAAR,aAAA,GAAAF,IAAI,CAACU,OAAO,cAAAR,aAAA,uBAAZA,aAAA,CAAcE,IAAI,KAAI,uBAAuB;MACtDO,QAAQ,EAAEX,IAAI,CAACW;IACjB,CAAC;EAAA,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAAA,IAAAC,cAAA,EAAAC,cAAA;EAC7C,MAAMf,IAAI,GAAG,MAAMhB,sBAAsB,CAAC,GAAGD,YAAY,UAAU8B,MAAM,EAAE,CAAC;EAE5E,OAAO;IACLV,EAAE,EAAEH,IAAI,CAACG,EAAE;IACXC,IAAI,EAAEJ,IAAI,CAACI,IAAI;IACfC,KAAK,EAAEL,IAAI,CAACK,KAAK;IACjBC,IAAI,EAAE,EAAAQ,cAAA,GAAAd,IAAI,CAACO,OAAO,cAAAO,cAAA,uBAAZA,cAAA,CAAcR,IAAI,KAAI,sBAAsB;IAClDE,KAAK,EAAER,IAAI,CAACQ,KAAK;IACjBC,OAAO,EAAET,IAAI,CAACS,OAAO;IACrBC,OAAO,EAAE,EAAAK,cAAA,GAAAf,IAAI,CAACU,OAAO,cAAAK,cAAA,uBAAZA,cAAA,CAAcX,IAAI,KAAI,uBAAuB;IACtDO,QAAQ,EAAEX,IAAI,CAACW;EACjB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}